{"version":3,"sources":["AssetsGrid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["columns","field","headerName","width","type","AssetsGrid","props","style","height","rows","assets","pageSize","rowsPerPageOptions","App","useWebSocket","onOpen","console","log","shouldReconnect","closeEvent","lastMessage","readyState","connectionStatus","ReadyState","CONNECTING","OPEN","CLOSING","CLOSED","UNINSTANTIATED","useState","setAssets","useEffect","prev","JSON","parse","data","className","Box","sx","flexGrow","AppBar","position","Toolbar","Typography","variant","component","IconButton","size","edge","color","aria-label","mr","onClick","Grid","container","spacing","direction","alignItems","justifyContent","marginTop","item","lg","md","xs","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGMA,EAAwB,CAC5B,CAAEC,MAAO,KAAMC,WAAY,QAASC,MAAO,KAC3C,CACEF,MAAO,aACPC,WAAY,cACZE,KAAM,SACND,MAAO,KAET,CACEF,MAAO,eACPC,WAAY,gBACZE,KAAM,SACND,MAAO,KAET,CACEF,MAAO,gBACPC,WAAY,iBACZE,KAAM,SACND,MAAO,KAET,CACEF,MAAO,cACPC,WAAY,eACZE,KAAM,SACND,MAAO,KAET,CACEF,MAAO,eACPC,WAAY,gBACZE,KAAM,SACND,MAAO,MAII,SAASE,EAAWC,GACjC,OACE,qBAAKC,MAAO,CAAEC,OAAQ,IAAKL,MAAO,QAAlC,SACE,cAAC,IAAD,CACEM,KAAMH,EAAMI,OACZV,QAASA,EACTW,SAAU,GACVC,mBAAoB,CAAC,O,yDCqCdC,MAhEf,WAAgB,IAAD,IACuBC,IAHpB,+CAG4C,CAC1DC,OAAQ,kBAAMC,QAAQC,IAAI,+BAC1BC,gBAAiB,SAACC,GAAD,OAAgB,KAF3BC,EADK,EACLA,YAAaC,EADR,EACQA,WAKfC,GAAmB,mBACtBC,aAAWC,WAAa,cADF,cAEtBD,aAAWE,KAAO,QAFI,cAGtBF,aAAWG,QAAU,WAHC,cAItBH,aAAWI,OAAS,UAJE,cAKtBJ,aAAWK,eAAiB,kBALN,GAMvBP,GAZW,EAceQ,mBAAkB,IAdjC,mBAcNnB,EAdM,KAcEoB,EAdF,KA2Bb,OAXAC,qBAAU,WACY,OAAhBX,GACFU,GAAU,SAACE,GACT,MAAM,GAAN,mBACKA,GADL,CAEEC,KAAKC,MAAMd,EAAYe,aAI5B,CAACf,IAGF,sBAAKgB,UAAU,MAAf,UACE,cAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,SAAU,GAArB,SACE,cAACC,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMP,GAAI,CAAEC,SAAU,GAAzD,gCACsBjB,EADtB,OAGA,cAACwB,EAAA,EAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAM,UACNC,aAAW,OACXZ,GAAI,CAAEa,GAAI,GACVC,QAAS,kBAAMtB,EAAU,KAN3B,SAQE,cAAC,IAAD,aAKR,cAACuB,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,MACVC,WAAW,SACXC,eAAe,SACfnD,MAAO,CAAEoD,UAAW,OANtB,SAQE,cAACN,EAAA,EAAD,CAAMO,MAAI,EAACC,GAAI,EAAGC,GAAI,GAAIC,GAAI,GAA9B,SACE,cAAC1D,EAAD,CAAYK,OAAQA,YC5DfsD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f44e1de1.chunk.js","sourcesContent":["import { DataGrid, GridColDef } from \"@mui/x-data-grid\";\nimport { Asset } from \"./types\";\n\nconst columns: GridColDef[] = [\n  { field: \"id\", headerName: \"Asset\", width: 150 },\n  {\n    field: \"basePoints\",\n    headerName: \"Base Points\",\n    type: \"number\",\n    width: 200,\n  },\n  {\n    field: \"binancePrice\",\n    headerName: \"Binance Price\",\n    type: \"number\",\n    width: 200,\n  },\n  {\n    field: \"coinbasePrice\",\n    headerName: \"Coinbase Price\",\n    type: \"number\",\n    width: 200,\n  },\n  {\n    field: \"binanceBips\",\n    headerName: \"Binance Bips\",\n    type: \"number\",\n    width: 200,\n  },\n  {\n    field: \"coinbaseBips\",\n    headerName: \"Coinbase Bips\",\n    type: \"number\",\n    width: 200,\n  },\n];\n\nexport default function AssetsGrid(props: { assets: Asset[] }) {\n  return (\n    <div style={{ height: 800, width: \"100%\" }}>\n      <DataGrid\n        rows={props.assets}\n        columns={columns}\n        pageSize={20}\n        rowsPerPageOptions={[5]}\n      />\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport useWebSocket, { ReadyState } from \"react-use-websocket\";\nimport RefreshIcon from \"@mui/icons-material/Refresh\";\nimport { Asset } from \"./types\";\nimport AssetsGrid from \"./AssetsGrid\";\nimport {\n  AppBar,\n  Box,\n  Grid,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\n\nconst socketUrl = \"wss://arbitrage-scanner.herokuapp.com/prices\";\n\nfunction App() {\n  const { lastMessage, readyState } = useWebSocket(socketUrl, {\n    onOpen: () => console.log(\"WebSocket Client Connected\"),\n    shouldReconnect: (closeEvent) => true,\n  });\n\n  const connectionStatus = {\n    [ReadyState.CONNECTING]: \"Connecting\",\n    [ReadyState.OPEN]: \"Open\",\n    [ReadyState.CLOSING]: \"Closing\",\n    [ReadyState.CLOSED]: \"Closed\",\n    [ReadyState.UNINSTANTIATED]: \"Uninstantiated\",\n  }[readyState];\n\n  const [assets, setAssets] = useState<Asset[]>([]);\n\n  useEffect(() => {\n    if (lastMessage !== null) {\n      setAssets((prev) => {\n        return [\n          ...prev,\n          JSON.parse(lastMessage.data as string) as unknown as Asset,\n        ];\n      });\n    }\n  }, [lastMessage]);\n\n  return (\n    <div className=\"App\">\n      <Box sx={{ flexGrow: 1 }}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n              Arbitrage Scanner ({connectionStatus})\n            </Typography>\n            <IconButton\n              size=\"large\"\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              sx={{ mr: 2 }}\n              onClick={() => setAssets([])}\n            >\n              <RefreshIcon />\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n      </Box>\n      <Grid\n        container\n        spacing={0}\n        direction=\"row\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        style={{ marginTop: \"1vh\" }}\n      >\n        <Grid item lg={8} md={10} xs={12}>\n          <AssetsGrid assets={assets} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}